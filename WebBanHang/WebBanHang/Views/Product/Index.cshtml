@model IEnumerable<WebBanHang.Models.Product>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

@{
    ViewData["Title"] = "List Book";
}

<h2 class="mb-4">List EBook</h2>

<div class="position-relative">

    <!-- Nút cuộn trái (ô vuông, mũi tên đen) -->
    <button id="btnLeft"
            class="arrow-box position-absolute top-50 start-0 translate-middle-y"
            type="button"
            aria-label="Cuộn trái"
            style="z-index:10;">
        <i class="bi bi-chevron-left arrow-icon" aria-hidden="true"></i>
    </button>

    <!-- Vùng danh sách sản phẩm -->
    <div id="productCarousel"
         class="d-flex"
         style="
            scroll-behavior:smooth;
            gap:20px;
            padding:10px 48px;      /* chừa khoảng cho nút */
            overflow-x: auto;        /* cho phép cuộn ngang */
            overflow-y: hidden;
            ">
        @foreach (var product in Model)
        {
            <div class="card shadow-sm border-0 product-card">
                <!-- Ảnh sách -->
                <div class="text-center card-img-wrap">
                    <img src="@product.ImageUrl" alt="@product.Name" class="card-img" />
                </div>

                <!-- Nội dung -->
                <div class="card-body p-2">
                    <h6 class="fw-bold text-truncate" title="@product.Name">@product.Name</h6>
                   
                    <p class="text-success fw-bold mb-1">@product.Price.ToString("C")</p>
                    @*
                    <!-- Rating demo -->
                    <p class="mb-1">
                        <span class="text-warning">&#9733;&#9733;&#9733;&#9733;&#9734;</span>
                        <small class="text-muted">(120)</small>
                    </p>
                    *@
                    <!-- Hành động -->
                    <div class="d-flex justify-content-between mt-2">
                        <a asp-action="Display" asp-route-id="@product.Id" class="btn btn-primary btn-sm">Xem</a>
                        <a asp-action="Update" asp-route-id="@product.Id" class="btn btn-secondary btn-sm">Sửa</a>
                        <a asp-action="Delete" asp-route-id="@product.Id" class="btn btn-danger btn-sm">Xóa</a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Nút cuộn phải (ô vuông, mũi tên đen) -->
    <button id="btnRight"
            class="arrow-box position-absolute top-50 end-0 translate-middle-y"
            type="button"
            aria-label="Cuộn phải"
            style="z-index:10;">
        <i class="bi bi-chevron-right arrow-icon" aria-hidden="true"></i>
    </button>
</div>

@section Scripts {
    <script>
        (() => {
            const carousel = document.getElementById("productCarousel");
            const btnLeft  = document.getElementById("btnLeft");
            const btnRight = document.getElementById("btnRight");

            const STEP = 240; // mỗi lần cuộn ~ 1 thẻ + gap

            function clamp(val, min, max) { return Math.max(min, Math.min(max, val)); }

            function updateArrows() {
                const max = carousel.scrollWidth - carousel.clientWidth;
                btnLeft.disabled  = carousel.scrollLeft <= 2;
                btnRight.disabled = carousel.scrollLeft >= (max - 2);
                btnLeft.classList.toggle('disabled-box', btnLeft.disabled);
                btnRight.classList.toggle('disabled-box', btnRight.disabled);
            }

            function scrollByStep(dx) {
                const max = carousel.scrollWidth - carousel.clientWidth;
                const target = clamp(carousel.scrollLeft + dx, 0, max);
                carousel.scrollTo({ left: target, behavior: 'smooth' });
            }

            btnLeft.addEventListener('click',  () => scrollByStep(-STEP));
            btnRight.addEventListener('click', () => scrollByStep(STEP));
            carousel.addEventListener('scroll', updateArrows);

            // Cho phép lăn chuột theo phương ngang
            carousel.addEventListener('wheel', (e) => {
                if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) {
                    e.preventDefault();
                    scrollByStep(e.deltaY > 0 ? STEP : -STEP);
                }
            }, { passive: false });

            // Khởi tạo
            updateArrows();
            window.addEventListener('load', updateArrows);
        })();
    </script>
}

<style>
    /* Card layout cố định để cuộn mượt */
    .product-card {
        width: 200px;
        flex: 0 0 200px; /* cố định bề rộng 1 item */
        border-radius: 12px;
        transition: transform .2s;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,.18);
        }

    .card-img-wrap {
        height: 250px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .card-img {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain;
    }

    /* Ẩn thanh scrollbar nhưng vẫn cuộn được */
    #productCarousel::-webkit-scrollbar {
        display: none;
    }

    #productCarousel {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    /* Ô vuông chứa mũi tên (thiết kế mới) */
    .arrow-box {
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px; /* vuông có bo góc nhẹ */
        background-color: white; /* nền ô */
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        cursor: pointer;
        transition: transform .12s ease, opacity .12s;
        outline: none;
    }

    /* Icon mũi tên đen */
    .arrow-icon {
        font-size: 18px;
        color: #111; /* mũi tên đen */
    }

    /* hover / active */
    .arrow-box:hover {
        transform: translateY(-2px);
    }

    .arrow-box:active {
        transform: translateY(0);
    }

    /* disabled state (khi ở đầu/cuối) */
    .arrow-box.disabled-box,
    .arrow-box[disabled] {
        opacity: 0.45;
        pointer-events: none;
        transform: none;
    }

    /* Khi nút chồng lên ảnh, làm nổi bật và không che quá nhiều */
    .arrow-box {
        backdrop-filter: blur(2px);
    }

    /* Nếu muốn ô đen nền và mũi tên trắng thay vì nền trắng mũi tên đen,
       đổi background-color: #111; và .arrow-icon { color: #fff; } */
</style>
